@startuml
title Golden Trucking â€“ Core Class Diagram (User + Employee only)

class Load {
  - id: String
  - referenceNo: String
  - status: String
  - rateAmount: Float
  - eta: DateTime
  - trackingId: String
  ' --- collapsed details ---
  - rateConfirmationRef: URI
  - assignedAt: DateTime
  - assignmentNotes: String
  - driverId: String
  - tractorId: String
  - trailerId: String
  - pickupAddress: String
  - pickupScheduledAt: DateTime
  - pickupActualAt: DateTime
  - deliveryAddress: String
  - deliveryScheduledAt: DateTime
  - deliveryActualAt: DateTime
  --
  + assignDriver(employee: Employee): void
  + assignEquipment(tractorId: String, trailerId: String): void
  + displayLoadInfo(): void
  + updateStatus(status: String): void
}

' ======= PEOPLE =======
class User {
  - id: String
  - name: String
  - email: String
  - phone: String
  - role: String          ' Customer, Broker, Employee
  - createdAt: DateTime
  --
  + updateContact(email: String, phone: String): void
  + requestBooking(form: String): String
  + submitLoad(form: String): String
  + viewTracking(loadId: String): TrackingInfo
}

class Employee {
  - employeeId: String
  - hireDate: DateTime
  - position: String      ' Dispatcher, Driver, Billing, Accounting (label only)
  --
  + processBooking(formRef: String): boolean
  + manageDispatch(loadId: String, driverId: String, tractorId: String, trailerId: String): void
  + issueInvoice(loadId: String): String
  + recordPayment(invoiceId: String, amount: Float, method: String): void
  + handleDocument(loadId: String, type: String, fileRef: URI): String
}

Employee --|> User

' ======= SERVICES =======
class LoadService {
  - name: String
  --
  + getLoad(loadId: String): Load
  + getTracking(loadId: String): TrackingInfo
  + listTrackingEvents(loadId: String): List<TrackingEvent>
  + updateStatus(loadId: String, status: String): void
}

class DocumentService {
  - name: String
  --
  + upload(loadId: String, type: String, fileRef: URI): String
  + list(loadId: String): List<Document>
  + get(docId: String): Document
  + verify(docId: String): void
}

class InvoiceService {
  - name: String
  --
  + createInvoice(loadId: String): Invoice
  + sendInvoice(invoiceId: String, toEmail: String): void
  + recordPayment(invoiceId: String, payment: Payment): void
  + getInvoice(invoiceId: String): Invoice
}

class EventNotify {
  - name: String
  --
  + publish(eventType: String, refId: String, audience: String): Notification
  + notifyLoadStatusChanged(loadId: String, to: String): Notification
  + notifyInvoiceSent(invoiceId: String, to: String): Notification
}

class Notification {
  - id: String
  - type: String
  - message: String
  - channel: String
  - recipientId: String
  - createdAt: DateTime
  - deliveredAt: DateTime
  - readAt: DateTime
  - refType: String
  - refId: String
  --
  + markDelivered(): void
  + markRead(): void
}

' ======= HELPERS =======
class TrackingInfo {
  - status: String
  - eta: DateTime
  - lastLocation: String
  - lastUpdated: DateTime
}

class TrackingEvent {
  - occurredAt: DateTime
  - status: String
  - location: String
}

class Document {
  - id: String
  - loadId: String
  - type: String
  - status: String
  - fileRef: URI
  - uploadedAt: DateTime
  --
  + downloadUri(): URI
}

class Invoice {
  - id: String
  - issuedAt: DateTime
  - status: String
  - subtotal: Float
  - tax: Float
  - total: Float
  - loadId: String
  --
  + balance(): Float
  + applyPayment(p: Payment): void
  + computeTotals(): void
}

class Payment {
  - id: String
  - amount: Float
  - method: String
  - paidAt: DateTime
  - reference: String
  - status: String
  --
  + isCleared(): boolean
}

' ======= RELATIONSHIPS  =======
' Loads and people
Load "1" --> User : bookedBy >
Load "0..1" --> User : arrangedBy >
Load "0..1" --> Employee : dispatchedBy >
Load "0..1" --> Employee : assignedTo >

' Invoicing
Invoice --> Load : forLoad >
Invoice "0..*" o-- Payment
InvoiceService ..> Invoice : <<produces>>

' Services <-> domain
LoadService ..> Load : <<manages>>
LoadService --> TrackingInfo : <<returns>>
LoadService --> TrackingEvent : <<lists>>
DocumentService ..> Document : <<manages>>
Document --> Load : forLoad >

' Notifications
EventNotify ..> Notification : <<produces>>
EventNotify ..> User : <<routesTo>>
LoadService ..> EventNotify : status events
InvoiceService ..> EventNotify : invoice events
DocumentService ..> EventNotify : document events
Notification --> Load : about >
Notification --> Invoice : about >

' Who uses services (generic)
User ..> LoadService : track/view
Employee ..> LoadService : manage booking/dispatch
Employee ..> DocumentService : upload/verify docs
Employee ..> InvoiceService : invoicing & payments

@enduml
